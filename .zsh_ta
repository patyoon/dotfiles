##########################################
###### TELLAPART ONLY ####################
##########################################

# Useful bash functions at Tellapart. Feel free to add more!
# To use these, source this file from some other file you source
# (such as your .bashrc)
# Usage: source $TELLAPART_HOME/tools/scripts/tellapart_bash_functions

export PATH=$PATH:$TELLAPART_HOME/tools/bin

export HADOOP

##### Functions #####

### ssh-ro ###
function ssh-ro {
  ssh -i $TC_KEY_DIR/ro/key_pair_us-east-1 -o StrictHostKeyChecking=no "$@"
}

### ssh-ro-master ###
function ssh-ro-master {
  ssh-ro hadoop@$DEFAULT_DEFAULT_HADOOP_MASTER_HOSTNAME "$@"
}

### scp-ro ###
function scp-ro {
  scp -i $TC_KEY_DIR/ro/key_pair_us-east-1 -o StrictHostKeyChecking=no "$@"
}

### ssh-prod ###
function ssh-prod {
  ssh -i $TC_KEY_DIR/prod/key_pair_us-east-1 -o StrictHostKeyChecking=no "$@"
}

### ssh-prod-west ###
function ssh-prod-west {
  ssh -i $TC_KEY_DIR/prod/key_pair_us-west-1 -o StrictHostKeyChecking=no "$@"
}

### pullfile ###
# Pulls report results from S3 and downloads to current directory.
# Usage: pullfile <report-name> e.g. pullfile ctr_by_criteria
# Requirements: Must set up $USER, $DEFAULT_DEFAULT_HADOOP_MASTER_HOSTNAME first
function pullfile {
  ssh-ro hadoop@$DEFAULT_DEFAULT_HADOOP_MASTER_HOSTNAME "mkdir -p /mnt/tmp/$USER; hadoop fs -cat s3n://tellapart-rye-dataz/tmp/output/$USER/reports/$1/part-* > /mnt/tmp/$USER/$1.txt; gzip -f /mnt/tmp/$USER/$1.txt"
  scp-ro hadoop@$DEFAULT_DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/$USER/$1.txt.gz .
  gunzip $1.txt.gz
}

### public-dns-from-instance-id ###
# Get EC2 instance public DNS from instance ID.
# Usage: public-dns-from-instance-id <instance-id>
function public-dns-from-instance-id {
  ec2-describe-instances $1 | grep '^INSTANCE' | cut -f4
}

### instance-id-from-public-dns ###
# Get EC2 instance ID from public DNS.
# Usage: instance-id-from-public-dns <public-dns>
function instance-id-from-public-dns {
  ec2-describe-instances | grep '^INSTANCE' | grep $1 | cut -f2
}

### list-frontends ###
# List out public dns for all frontends.
function list-frontends {
 ec2-describe-instances | grep -A 1 "[[:space:]]TellApartFrontend" | grep amazonaws | cut -f 4
}

### random-frontend ###
# Returns a random frontend public dns.
function random-frontend {
  list-frontends | perl -MList::Util -e 'print List::Util::shuffle <>' | head -n 1
}

### Make s3cmd configuration files from aws private/secret keys ###
function make-s3-configs {
for d in "ro" "prod"; do
echo "[default]" > $TC_KEY_DIR/$d/s3cfg
echo "access_key = $(cat $TC_KEY_DIR/$d/aws_access_key)" >> /Volumes/tc/keys/$d/s3cfg
echo "secret_key = $(cat $TC_KEY_DIR/$d/aws_secret_key)" >> /Volumes/tc/keys/$d/s3cfg
done
}

### Run s3cmd for prod/ro ###
# You must run make-s3-configs first to make s3cfg files
alias s3cmd-prod="s3cmd -c$TC_KEY_DIR/prod/s3cfg"
alias s3cmd-ro="s3cmd -c$TC_KEY_DIR/ro/s3cfg"

# Lookup a product record.
function lookup-product {
  cd $TELLAPART_HOME && PYTHONPATH=pytest:py:build/gen-py:py/tellapart/third_party python py/tellapart/scripts/lookup.py lookup_product --sku=$1 --merchant=$2 && cd -
}

# Lookup a user's UserProperties.
function lookup-user-properties {
  cd $TELLAPART_HOME && PYTHONPATH=pytest:py:build/gen-py:py/tellapart/third_party python py/tellapart/scripts/lookup.py lookup_user_properties --uid_list=$1 && cd -
}

# Lookup a user's UserProperties with the tid for the provided uid.
function lookup-user-properties-tid {
  cd $TELLAPART_HOME && PYTHONPATH=pytest:py:build/gen-py:py/tellapart/third_party python py/tellapart/scripts/lookup.py lookup_user_properties --uid_list=$1 --convert_to_tid && cd -
}

### gen-thrift ###
# Generate python thrift code.
function gen-thrift {
  cd $TELLAPART_HOME && PYTHONPATH=$(pwd)/py:$(pwd)/pytest python pytest/tellapart/testutil/thrift_generate_script.py && cd -
}

##### Aliases #####
alias flush-dns-cache="dscacheutil -flushcache"
alias datepy="python -c 'import time; print time.time()'"

alias gtfo='gen-thrift && (cd $TELLAPART_HOME/py && env PYTHONPATH=$TELLAPART_HOME/pytest:$TELLAPART_HOME/py:$TELLAPART_HOME/build/gen-py:$TELLAPART_HOME/rye/scripts:$TELLAPART_HOME/py/tellapart/third_party fab -f tellapart/deploy/fabfile.py deploy_config:prod auto_prod_push)'

#Rye Default Cluster
export DEFAULT_HADOOP_MASTER_HOSTNAME='EC2-23-23-238-60.compute-1.amazonaws.com'
export DEFAULT_HADOOP_MASTER_HOSTNAME_JOBTRACKER='http://ec2-23-23-238-60.compute-1.amazonaws.com:9100'
export DEFAULT_AZKABAN='htt1p://ec2-23-23-238-60.compute-1.amazonaws.com:8081'

#Rye Nightly Cluster

export NIGHTLY_DEFAULT_HADOOP_MASTER_HOSTNAME='ec2-54-243-234-161.compute-1.amazonaws.com'
export NIGHTLY_DEFAULT_HADOOP_MASTER_HOSTNAME_JOBTRACKER='http://ec2-54-243-234-161.compute-1.amazonaws.com:9100'
export NIGHTLY_AZKABAN='http://ec2-54-243-234-161.compute-1.amazonaws.com:8081'
export EDITOR=emacs
alias em="open -a /Applications/Emacs.app \"$@\" && osascript -e 'tell application \"Emacs.app\" to activate'"

# Mount Truecrypt volume and create tc truecript symlink to untitled truecrypt volume.
export PYTHONPATH=$TELLAPART_HOME/pytest:$TELLAPART_HOME/py/tellapart/third_party:$TELLAPART_HOME/build/gen-py:$TELLAPART_HOME/py:$PYTHONPATH
export TC_KEY_DIR=/Volumes/tc/keys
export TELLAPART_HOME=/Users/patrick/workspace/tellapart
export TAHOME=$TELLAPART_HOME
export TA_ROOT=$TELLAPART_HOME
export TELLAPART_PYTHONPATH="$TELLAPART_HOME/py"
export TELLAPART_GENPY="$TELLAPART_HOME/build/gen-py"
export TELLAPART_PYTEST="$TELLAPART_HOME/pytest"

# TellApart additions to PATH
export PATH=$PATH:$TELLAPART_HOME/tools/bin

# run_tests autocomplete
source $TELLAPART_HOME/tools/scripts/bash_completion/run_tests

export RO_CONTROLLER="ec2-184-73-193-191.compute-1.amazonaws.com"
export EAST_CONTROLLER="ec2-184-73-213-252.compute-1.amazonaws.com"
export WEST_CONTROLLER="ec2-184-72-51-165.us-west-1.compute.amazonaws.com"
export WEST_2_CONTROLLER="ec2-54-245-104-203.us-west-2.compute.amazonaws.com"
export DEVEL_SERVER="ec2-50-19-80-99.compute-1.amazonaws.com"

# ssh into HADOOP MASTER default
alias ssh-hm="sshinto $DEFAULT_HADOOP_MASTER_HOSTNAME"
alias refresh-jt="delete-known-host $DEFAULT_HADOOP_MASTER_HOSTNAME"
# ssh into HADOOP MASTER nightly
alias ssh-hmn="sshinto $HM_NIGHTLY"

# This test instance will change, update here.
export PATRICK_INSTANCE="ec2-107-21-90-198.compute-1.amazonaws.com"
export PATRICK_INSTANCE_WEST="ec2-204-236-157-172.us-west-1.compute.amazonaws.com"

alias ssh-patrick-instance="sshinto $PATRICK_INSTANCE"
# cwi is copy patrick instance
alias cwi="echo $PATRICK_INSTANCE | pbcopy"

# ELB utils
alias dereg-west="elb-deregister-instances-from-lb FrontendElb --region=us-west-1 --instances"
alias reg-west="elb-register-instances-with-lb FrontendElb --region=us-west-1 --instances"
alias dereg-east="elb-deregister-instances-from-lb FrontendElb3 --instances"
alias reg-east="elb-register-instances-with-lb FrontendElb3 --instances"
# ELB for DoubleClick handlers
alias reg-dclk-east="elb-register-instances-with-lb DclkElb --instances"
alias dereg-dclk-east="elb-deregister-instances-from-lb DclkElb --instances"

# crumb.js JavaScript utils
alias refresh-cloudfront-js="cd $TELLAPART_HOME/crumb/js && fab-2.6 prod refresh_cloudfront_crumb_js"

# SSH, SCP utils
alias ssh-ro="ssh -i /Volumes/tc/keys/ro/key_pair_us-east-1 -o StrictHostKeyChecking=no"
alias ssh-prod="ssh -i /Volumes/tc/keys/prod/key_pair_us-east-1 -o StrictHostKeyChecking=no"
alias ssh-prod-west="ssh -i /Volumes/tc/keys/prod/key_pair_us-west-1 -o StrictHostKeyChecking=no"

alias scp-ro="scp -i /Volumes/tc/keys/ro/key_pair_us-east-1 -o StrictHostKeyChecking=no"
alias scp-prod-east="scp -i /Volumes/tc/keys/prod/key_pair_us-east-1 -o StrictHostKeyChecking=no"
alias scp-prod-west="scp -i /Volumes/tc/keys/prod/key_pair_us-west-1 -o StrictHostKeyChecking=no"
alias scp-devel="scp -i /Volumes/tc/keys/devel/key_pair_us-east-1 -o StrictHostKeyChecking=no"

# Check varz utils
function check-varz-east {
  ssh-prod ubuntu@$EAST_CONTROLLER "curl 'ec2-23-21-251-6.compute-1.amazonaws.com:8279/varz?varz=$1'"
}
function check-varz-west {
  ssh-prod-west ubuntu@$WEST_CONTROLLER "curl 'ec2-50-18-110-65.us-west-1.compute.amazonaws.com:8279/varz?varz=$1'"
}

function crumbjs-test-make {
  MINIFY=${1:-1}
  cd $TELLAPART_HOME/crumb/js
  CLOSURE_COMPILER_JAR=../../third_party/google_closure_compiler/compiler.jar fab-2.6 prod:minify=$MINIFY make
}

function upload-crumbjs-test {
  crumbjs-test-make $1
  scp-devel ./crumb.js ubuntu@$DEVEL_SERVER:~/crumb_test.js
}

function upload-patrick-crumbjs-test {
  crumbjs-test-make $1
  scp-prod-east ./crumb.js ubuntu@$PATRICK_INSTANCE:~/crumb_test.js
}

function upload-local-crumbjs-test {
  crumbjs-test-make $1
  sudo cp ./crumb.js /opt/local/share/nginx/html/crumb.js
  sudo cp ./crumb.js /opt/local/share/nginx/html/includes/js/crumb.js
  #sudo mkdir /opt/local/share/nginx/html/4nS0E2IYHb6u
  #sudo cp ./crumb.js /opt/local/share/nginx/html/4nS0E2IYHb6u/crumb.js
}
#alias upload-crumbjs-test=" && PYTHONPATH=../../py CLOSURE_COMPILER_JAR=../../third_party/google_closure_compiler/compiler.jar fab-2.6 prod make && scp-devel ./crumb.js ubuntu@$DEVEL_SERVER:~/crumb_test.js"
#alias upload-crumbjs-test-nomin="cd $TELLAPART_HOME/crumb/js && PYTHONPATH=../../py CLOSURE_COMPILER_JAR=../../third_party/google_closure_compiler/compiler.jar fab-2.6 prod:minify=0 make && scp-devel ./crumb.js ubuntu@$DEVEL_SERVER:~/crumb_test.js"

export DEPLOY_FAB="fab -f ${TELLAPART_HOME}/py/tellapart/deploy/fabfile.py"
export KEY_PAIR_EAST="${TC_KEY_DIR}/prod/key_pair_us-east-1"
export KEY_PAIR_WEST="${TC_KEY_DIR}/prod/key_pair_us-west-1"

# Pushing to canaries
export FAB_RC_PATRICK_INSTANCE="~/config/canary-patrick.cfg"
alias canary-patrick="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB -i $KEY_PAIR_EAST deploy_config:devel_ec2 bundle:use_commit_id=HEAD,perform_bundle_diff=False canary:hostname=$PATRICK_INSTANCE -c $FAB_RC_PATRICK_INSTANCE && say canary way done"
alias canary-patrick-west="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB -i $KEY_PAIR_WEST deploy_config:devel_ec2 bundle:use_commit_id=HEAD,perform_bundle_diff=False canary:hostname=$PATRICK_INSTANCE_WEST -c $FAB_RC_PATRICK_INSTANCE && say canary way done"
alias canary-devel="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB -i $KEY_PAIR_EAST deploy_config:devel_ec2 bundle canary"
alias spec-restart="$DEPLOY_FAB -i $KEY_PAIR_EAST deploy_config:prod restart_specific_prod_server"
alias spec-restart-west="$DEPLOY_FAB -i $KEY_PAIR_WEST deploy_config:prod restart_specific_prod_server"
# For canaries that are not FEs
alias canary-prod="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB -i $KEY_PAIR_EAST deploy_config:prod bundle canary"
# Conductor pushing.
alias conductor-canary-west="conductor canary --cluster main-west"
alias conductor-canary="conductor canary --cluster main-east"
alias conductor-release="conductor release_test --cluster main-east --servername"

alias rye-devel-manual="cd $TELLAPART_PYTHONPATH && fab -f tellapart/deploy/fabfile.py --hide running -H hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME -i ${TC_KEY_DIR}/ro/key_pair_us-east-1 deploy_config:rye rye_config:devel bundle rye && cd - && say rye devel done"
alias rye-devel="cd $TELLAPART_PYTHONPATH && echo -e '\n\n\n\n' | fab -f tellapart/deploy/fabfile.py --hide running -H hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME -i ${TC_KEY_DIR}/ro/key_pair_us-east-1 deploy_config:rye rye_config:devel bundle rye && cd - && say rye devel done"
alias rye-devel-py="cd $TELLAPART_PYTHONPATH && echo -e 'py\n\n\n\n' | fab -f tellapart/deploy/fabfile.py --hide running -H hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME -i ${TC_KEY_DIR}/ro/key_pair_us-east-1 deploy_config:rye rye_config:devel bundle rye && cd - && say rye devel done"

alias rye-nightly="cd $TELLAPART_PYTHONPATH && fab -f tellapart/deploy/fabfile.py --hide running -H $DEFAULT_HADOOP_MASTER_HOSTNAME -i $TC_KEY_DIR/ro/key_pair_us-east-1 deploy_config:rye rye_config:nightly bundle rye && cd - && say rye prod done"

alias prod-push="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB deploy_config:prod auto_prod_push"
alias prod-restart="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB deploy_config:prod auto_prod_restart"
alias prod-restart-single="cd $TELLAPART_PYTHONPATH && $DEPLOY_FAB deploy_config:prod restart_specific_prod_server"

#export SELENIUM_INSTANCE="ec2-184-73-102-200.compute-1.amazonaws.com"
export SELENIUM_INSTANCE="ec2-23-22-3-149.compute-1.amazonaws.com"
alias selenium-runtests="cd $TELLAPART_PYTHONPATH; $DEPLOY_FAB deploy_config:prod run_selenium_tests"
alias selenium-deploy="cd $TELLAPART_HOME/selenium/scripts && python push_to_prod.py ../.. ${SELENIUM_INSTANCE} && cd -"
alias selenium-proxy="ssh -i ${TC_KEY_DIR}/prod/awsprodkey7.pem -L 3389:${SELENIUM_INSTANCE}:3389 ubuntu@${PATRICK_INSTANCE}"

# Runs TellApart python unit tests
alias pt="cd $TELLAPART_HOME; run_tests py; cd -"
alias alltests="cd $TELLAPART_HOME; run_tests; cd -"
alias tapylint="cd $TELLAPART_HOME/pytest; python -m tellapart.pylint_all; cd -"
# Run tests in current directory with nose
alias dirtests="python -c 'import nose; nose.main()'"

alias gen-thrift="cd $TELLAPART_PYTEST; python tellapart/testutil/thrift_generate_script.py; cd -"

# Runs TellApart JavaScript crumb.js testing/deploy
alias jstests="cd $TELLAPART_HOME/crumb/js; fab-2.6 testing make && open tests/crumbjstests.html; cd -"


# -----------------------------------------------------------------------------
# AWS Utilities
# -----------------------------------------------------------------------------

# For AWS tools:
export AWS_ELB_HOME=/Users/patrick/tools/ElasticLoadBalancing-1.0.12.0/
export AWS_CLOUDWATCH_HOME=/Users/patrick/tools/CloudWatch-1.0.12.1/
export AWS_AUTO_SCALING_HOME=/Users/patrick/tools/AutoScaling-1.0.39.0/
export EC2_HOME=/usr/ec2-api-tools
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home
export PATH=$PATH:$AWS_ELB_HOME/bin:${AWS_AUTO_SCALING_HOME}/bin:${AWS_CLOUDWATCH_HOME}/bin:$EC2_HOME/bin

# NOTE: must change the following after a key rotation:
# export EC2_CERT=$TC_KEY_DIR/prod/cert-AFUEC3S2H5ND2PW66SQIVPS6PMG4PRHX.pem
# export EC2_PRIVATE_KEY=$TC_KEY_DIR/prod/pk-AFUEC3S2H5ND2PW66SQIVPS6PMG4PRHX.pem

# Get EC2 instance public DNS from instance ID.
# Usage: public-dns-from-instance-id <instance-id>
function public-dns-from-instance-id {
  ec2-describe-instances $1 | grep '^INSTANCE' | cut -f4
}

# Get EC2 instance ID from public DNS.
# Usage: instance-id-from-public-dns <public-dns>
function instance-id-from-public-dns {
  ec2-describe-instances | grep '^INSTANCE' | grep $1 | cut -f2
}

# Random shortcuts
alias flush-dns-cache="dscacheutil -flushcache"
alias reload="source ~/.bash_profile"
alias datepy="python -c 'import time; print time.time()'"

# Function to switch between /etc/hosts and /etc/hosts.next for hosts file
# Define what you want the next host file to be in hosts.next
function switchhosts {
  sudo cp /etc/hosts /etc/hosts.tmp;
  sudo cp /etc/hosts.next /etc/hosts;
  sudo cp /etc/hosts.tmp /etc/hosts.next;
  flush-dns-cache;
}

function pullfile {
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "mkdir -p /mnt/tmp/patrick; hadoop fs -cat s3n://tellapart-rye-dataz/tmp/output/$USER/reports/$1/part-* > /mnt/tmp/patrick/$1.txt; gzip -f /mnt/tmp/patrick/$1.txt"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/patrick/$1.txt.gz .
  gunzip $1.txt.gz
}
function pullfile-nightly {
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "mkdir -p /mnt/tmp/patrick; hadoop fs -cat s3n://tellapart-rye-dataz/tmp/output/nightly/reports/$1/part-* > /mnt/tmp/patrick/$1.txt; gzip -f /mnt/tmp/patrick/$1.txt"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/patrick/$1.txt.gz .
  gunzip $1.txt.gz
}

function pullhive {
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "mkdir -p /mnt/tmp/patrick; cat /ebs1/tellapart/deploy/patrick/tellapart/rye/scripts/$1/* > /mnt/tmp/patrick/$1.txt; gzip -f /mnt/tmp/patrick/$1.txt"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/patrick/$1.txt.gz .
  gunzip $1.txt.gz
  sed s//,/g <$1.txt >$1.csv
}

function pullryehive {
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "gzip -f /mnt/tmp/patrick/run/$1.out"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/patrick/run/$1.out.gz .
  gunzip $1.out.gz
}

function pullryehive-no-out {
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "gzip -f /mnt/tmp/patrick/run/$1"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/mnt/tmp/patrick/run/$1.gz .
  gunzip $1.gz
}

function sed-ctrl-a {
  sed s//,/g <$1.txt >$1.csv
}

function oids-by-user_tags {
  cd ~/tmp/orders/
  ssh-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME "cat /ebs1/tellapart/deploy/patrick/tellapart/rye/scripts/hive_output/* > /ebs1/tellapart/deploy/patrick/tellapart/rye/scripts/cp_orders.txt"
  scp-ro hadoop@$DEFAULT_HADOOP_MASTER_HOSTNAME:/ebs1/tellapart/deploy/patrick/tellapart/rye/scripts/cp_orders.txt ~/tmp/orders/cp_orders.txt
  python orders.py
  open ./
}

# Argument is name of given codes .csv from hive report
function process-given-codes {
  sort $1 | uniq > wayfair_given_codes_uniq_given.csv
  cat wayfair_given_codes_uniq_given.csv | awk -F, '{ print $1 }' | sort | uniq -c | sort -nr > deduped_counts.txt
  cat deduped_counts.txt | awk '{ if ($1 > 1) print }' > dupes_only_counts.txt
  cat dupes_only_counts.txt | awk '{ print $2 }' > dupes_codes.txt
}

function rye-job {
  python $TELLAPART_HOME/rye/scripts/rye_cluster_remote.py --run_script rye_jobs_launcher.py --jobs=$1 --start_date=$2 --end_date=$3
}

export FRONTEND_SETTINGS_DEVEL_EC2="$TELLAPART_PYTHONPATH/tellapart/settings/frontend_settings_devel_ec2.py"
function swap-test-ec2 {
  cp $TELLAPART_PYTHONPATH/tellapart/frontend/middleware.py ~/snippets/middleware_saved.py
  cp ~/snippets/middleware.py $TELLAPART_PYTHONPATH/tellapart/frontend/middleware.py
}
function swap-back-for-commit {
  cp ~/snippets/middleware_saved.py $TELLAPART_PYTHONPATH/tellapart/frontend/middleware.py
}

function nmsid {
    python $TELLAPART_HOME/py/tellapart/scripts/ego/ego_admin.py lookup_sid --sid=nMCifzghFsNa:$1 --sid_type=MERCHANT_OFFLINE_ID
}

function update_aws {
   python ${TOOL_HOME}/key_client_standalone.py --user=$1 download_keys
}

alias canarypushtest='cd $TELLAPART_HOME/py && PYTHONPATH=.:$PYTHONPATH fab -f tellapart/deploy/fabfile.py deploy_config:devel_ec2 bundle canary'

alias configurator="python $TELLAPART_HOME/py/tellapart/scripts/configurator_client.py --user patrick"

# Set up env variables so that iPython works with pytest as first dir (no FE
# settings problem)
# used in tools/bin/tapy
#export TAPY=`which ipython`
#alias testtapy='PYTHONPATH=$TAHOME/pytest tapy'

function rye-job {
    python $TELLAPART_HOME/rye/scripts/rye_cluster_remote.py --run_script rye_jobs_launcher.py --jobs=$1 --start_date=$2 --end_date=$3
}

export PYTHONPATH=$TELLAPART_HOME/pytest:$TELLAPART_HOME/py/tellapart/third_party:$TELLAPART_HOME/build/gen-py:/Users/patrick/workspace/py/tellapart/third_party:$TELLAPART_HOME/rye/scripts

#mount truecrypt volume
/Users/patrick/workspace/tools/mount_tc

function test-gtfo {
pushd $TAHOME/py
gen-thrift
fab -f tellapart/deploy/fabfile.py \
deploy_config:devel_ec2 \
bundle:use_commit_id=HEAD,perform_bundle_diff=false \
canary
popd
}