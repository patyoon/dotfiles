export SYSOPS_PATH=/Users/patrick_yoon/workspace/sysops
export PATH=$PATH:/opt/airbnb/bin:$SYSOPS_PATH/optica_tools

# afdev
export DATA_DIR=$HOME/workspace/data #PATH WHERE YOU CLONED THE DATA REPO
export AFDEV_HOST="i-0df372a95530fa6ab.inst.aws.us-east-1.prod.musta.ch"
export CDH_GOLD_HOST="i-9dda8d4f.inst.aws.us-east-1.prod.musta.ch"
export AFDEV_PORT=61903 #CHOOSE A DIFFERENT PORT

# optional
export AFDEV_USER="patrick_yoon"

# TODO: Set your environment variables below
export BIGHEAD_OS=~/workspace/bighead
export TREEHOUSE_PATH=~/workspace/treehouse
export BIGHEAD_TH=$TREEHOUSE_PATH/projects/bighead
export ML_MODELS_REPO=~/workspace/ml_models/
export ZIPLINE_REPO=$ML_MODELS_REPO/zipline

# compile thrift
function compile_thrift {
    pushd $BIGHEAD_OS/python/zipline2/schema; thrift --gen py -out . $BIGHEAD_OS/thrift/schemas/zipline_api.thrift;  popd
}

# materialize a join
function materialize_join {
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=joins/ --output_root=production; popd
}

# materialize a group_by
function materialize_group_by {
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=group_bys/ --output_root=production; popd
}

# materialize a staging_query
function materialize_staging_query {
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=staging_queries/ --output_root=production; popd
}

# Materialize all V2 configs and compile thrift.
function materialize {
    pushd $BIGHEAD_OS/python/zipline2/schema
    thrift --gen py -out . $BIGHEAD_OS/thrift/schemas/zipline_api.thrift
    popd
    pushd $ZIPLINE_REPO/
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=joins/ --output_root=production; popd
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=group_bys/ --output_root=production; popd
    pushd $ZIPLINE_REPO/; PYTHONPATH=$BIGHEAD_OS/python:$PYTHONPATH python3.7 $BIGHEAD_OS/python/zipline2/repo/materialize.py --zipline_root=$ZIPLINE_REPO --input_path=staging_queries/ --output_root=production; popd
    popd
}

# clean up maven and build OS zipline.
function zbuild {
    rm -rf ~/.m2/repository/ai/bighead/
    pushd $BIGHEAD_OS/thrift/generic > /dev/null && ../../gradlew publish && popd > /dev/null
    pushd $BIGHEAD_OS/zipline/ > /dev/null && ../gradlew publish && popd > /dev/null
}

function bhsync {
    pushd $BIGHEAD_OS/zipline/batch
    zbuild && scp build/libs/batch-0.0.1-local-all.jar $AFDEV_HOST:/tmp/batch-0.0.1-local-all.jar
    popd
}

# make sure you set the BIGHEAD_VERSION in treehouse/gradle/libraries.gradle to 0.0.1-local3
function zssync {
    pushd $BIGHEAD_TH/zipline/streaming
    ../../../../gradlew shadowJar && rsync -P -avz -e ssh build/libs/streaming-all.jar $AFDEV_HOST:/tmp/zipline-streaming.jar
    popd
}

# make sure you set the BIGHEAD_VERSION in treehouse/gradle/libraries.gradle to 0.0.1-local3
function zsrsync {
    pushd $BIGHEAD_TH/zipline/streaming
    ../../../../gradlew fatJar && time rsync -av -e ssh build/libs/streaming-all.jar $AFDEV_HOST:/tmp/zipline-streaming.jar
    popd
}


# build treehouse zipline batch and sync it to airflow devbox.
function zbsync {
    pushd $BIGHEAD_TH/zipline/batch
    ../../../../gradlew shadowJar && scp build/libs/batch-all.jar $AFDEV_HOST:/tmp/zipline-batch.jar
    popd
}

# sync ml_models repo to airflow devbox.
function ml_models_sync {
    rsync -avh --include='zipline' --exclude='.git/' --delete $ZIPLINE_REPO $AFDEV_HOST:~/ml_models/
}

function gen_zipline_thrift {
    pushd $BIGHEAD_OS
    thrift --gen py -out python/bighead/_thrift/ thrift/schemas/zipline_data.thrift
    popd
}

function gen_bighead_thrift {
    pushd $BIGHEAD_OS
    thrift --gen py -out python/bighead/_thrift/ thrift/schemas/model.thrift
    popd
}

function gen_ml_thrift {
    pushd $BIGHEAD_OS/zipline/python/zipline/schema
    thrift --gen py -out . $BIGHEAD_OS/thrift/schemas/zipline_api.thrift
    popd
}


alias ssh_tunnel="$DATA_DIR/scripts/compute-frameworks/utils/ssh_tunnel"
# export REDSPOT_TEST=$(optica role=redspot-test-01)


# For compilers to find zlib you may need to set:
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

function afdev_sync_bighead {
    /usr/local/bin/rsync  -P -avz \
    --exclude ".git/" \
    --exclude ".gradle/" \
    --exclude "**/build/classes" \
    --exclude "**/build/generated" \
    --exclude "**/build/libs/" \
    --exclude "**/build/" \
    --exclude "**/build/tmp/" \
    --exclude "**/build/distributions/" \
    -e ssh  $BIGHEAD_OS  patrick_yoon@$AFDEV_HOST:/home/patrick_yoon
}

function afdev_sync_treehouse {
    /usr/local/bin/rsync  -P -avz \
    --exclude ".git/" \
    --exclude ".gradle/" \
    --exclude "**/build/classes" \
    --exclude "**/build/generated" \
    --exclude "**/build/libs/" \
    --exclude "**/build/tmp/" \
    -e ssh  $TREEHOUSE_PATH  patrick_yoon@$AFDEV_HOST:/home/patrick_yoon --delete
}

alias ssh_tunnel="yk && ssh -NfqD localhost:8527 patrick_yoon@gw1.silver.musta.ch"
